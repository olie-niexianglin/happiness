-- 建造者模式(Builder Pattern)
   定义:
   将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。
   建造者模式是一步一步创建一个复杂的对象，它允许用户只通过指定复杂对象的类型和内容就构可以建它们，用户不需要知道内部的
   具体构建细节。


   模式角色:
        Builder（抽象建造者）
        它为创建一个产品对象的各个部件指定抽象接口，在该接口中一般声明两类方法，一类方法是buildXXX()，
        它们用于创建复杂对象的各个部件；另一类方法是getXXX()，它们用于返回复杂对象。Builder既可以是抽象类，也可以是接口。
        ConcreteBuilder（具体建造者）
        它实现了Builder接口，实现各个部件的具体构造和装配方法，定义并明确它所创建的复杂对象，也可以提供一个方法返回创建好的复杂产品对象。
        Product（产品角色）
        它是被构建的复杂对象，包含多个组成部件，具体建造者ConcreteBuilder创建该产品的内部表示并定义它的装配过程。
        Director（指挥者）
        指挥者又称为导演类，它负责安排复杂对象的建造次序，指挥者与抽象建造者之间存在关联关系，
        可以在其construct()建造方法中调用建造者对象的部件构造与装配方法，完成复杂对象的建造。
        客户端一般只需要与指挥者进行交互，在客户端确定具体建造者的类型，并实例化具体建造者对象，
        然后通过指挥者类的构造函数或者Setter方法将该对象传入指挥者类中。


   优点:
   客户端不必知道产品内部组成的细节，将产品本身与产品的创建过程解耦，使得相同的创建过程可以创建不同的产品对象。
   每一个具体建造者都相对独立，而与其他的具体建造者无关，因此可以很方便地替换具体建造者或增加新的具体建造者，用户使用不同的具体建造者即可得到不同的产品对象。
   可以更加精细地控制产品的创建过程 。将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰，也更方便使用程序来控制创建过程。
   增加新的具体建造者无须修改原有类库的代码，指挥者类针对抽象建造者类编程，系统扩展方便，符合“开闭原则”。

   与工厂模式的区别
   其实，在建造者模式里有个指导者，由指导者来管理建造者，用户是与指导者联系的，指导者联系建造者最后得到产品。
   即建造模式可以强制实行一种分步骤进行的建造过程。而抽象工厂模式不具备最终的这个直接创建功能。
   建造者模式与工厂模式是极为相似的，总体上，建造者模式仅仅只比工厂模式多了一个“导演类”的角色。
   假如把这个导演类看做是最终调用的客户端，那么剩余的部分就可以看作是一个简单的工厂模式了。
   与工厂模式相比，建造者模式一般用来创建更为复杂的对象，因为对象的创建过程更为复杂，因此将对象的创建过程独立出来组成一个新的导演类。
   也就是说，工厂模式是将对象的全部创建过程封装在工厂类中，由工厂类向客户端提供最终的产品；
   而建造者模式中，建造者类一般只提供产品类中各个组件的建造，而将具体建造过程交付给导演类。
   由导演类负责将各个组件按照特定的规则组建为产品，然后将组建好的产品交付给客户端。

   主要解决:将变与不变分离
   何时使用：一些基本部件不会变，而其组合经常变化的时候
   应用实例：去肯德基，汉堡，可乐，薯条，炸鸡翅等是不会变化的，而其中的组合是经常变化，生成出所谓的“套餐”。
































