-- 原型模式(ProtoType Pattern)
   定义:用原型实例指定创建对象的种类并且通过拷贝这些原型对象创建新的对象。

   模式角色
       1、抽象原型(Prototype)角色：这是一个抽象角色，通常由一个Java接口或Java抽象类实现。此角色给出所有的具体原型类所需的接口。
       2、具体原型（Concrete Prototype）角色：被复制的对象。此角色需要实现抽象的原型角色所要求的接口。

   优点：
       1、将产品的创建过程封装起来，客户端不需要了解产品的具体创建流程。
       2、利用Java的clone方法来创建对象肯定要比使用new来创建对象快很多，尤其是那些很复杂的对象的时候。
       3、可以在不修改其他代码的情况下添加新的产品，符合“开-闭”原则。
   缺点：
       原型模式的最大缺点就是每一个类必须都有一个clone方法，如果这个类的组成不太复杂的话还比较好，如果类的组成很复杂的话，如果想实现深度复制就非常困难了。

   深拷贝：
       1 利用 序列化和反序列化 进行深度克隆，但是被克隆对象需要实现 Serializable 接口
           把对象写到流里的过程是序列化过程（Serialization），而把对象从流中读出来的过程则叫做反序列化过程（Deserialization）。
           应当指出的是，写在流里的是对象的一个拷贝，而原对象仍然存在于JVM里面。
           在Java语言里深复制一个对象，常常可以先使对象实现Serializable接口，然后把对象（实际上只是对象的一个拷贝）写到一个流里，再从流里读出来，便可以重建对象。
           这样做的前提是对象以及对象内部所有引用到的对象都是可串行化的，否则，就需要仔细考察那些不可串行化的对象可否设成transient，从而将其排除在复制过程之外。
       2 利用 object.clone()方法进行深度克隆，但是被克隆对象需要 实现 Clonable 接口，而且需要遍历对象的所有属性进行递归调用 clone 方法。

       3 利用第三方类库实现深拷贝。