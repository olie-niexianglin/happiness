<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>olie-frame</artifactId>
        <groupId>olie</groupId>
        <version>1.0-SNAPSHOT</version>
        <!--<relativePath>根据路径寻找父元素 pom 文件，默认会在 ../ 目录下寻找</relativePath>-->
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <!--<groupId>默认情况下不需要指定，直接从父元素中继承</groupId>-->
    <!--<version>默认情况下不需要指定，直接从父元素中继承</version>-->
    <artifactId>code-maven</artifactId>

    <!-- 执行生命周期时 控制台日志输出的此信息 -->
    <name>CODE-FRAME</name>



    <properties>
        <junit.version>4.11</junit.version>
    </properties>



    <!--
        dependencies 元素是可以被继承，可以把一些公用的依赖定义到父 pom 中去，但是在扩展子元素的时候就会出现问题，因为你永远不清楚
        新增的子模块是否仍然需要之前共有的依赖？，然后就会出现了 dependencyManagement 元素
        dependencyManagement 元素既可以让子模块继承到父模块的配置，又可以保证子元素依赖配置的灵活性
    -->
    <!-- 此处定义的 dependencyManagement 并不会给 olie-frame 引入依赖，也不会给他的子模块引入依赖，不过这段代码是会被继承的 -->
    <!-- 其子模块依赖 junit 的时候，只需要如下配置即可 -->
    <!--<dependencies>-->
        <!--<dependency>-->
            <!--<groupId>junit</groupId>-->
            <!--<artifactId>junit</artifactId>-->
        <!--</dependency>-->
    <!--</dependencies>-->

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>${junit.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>





    <dependencies>
        <!-- maven 依赖管理 -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>${junit.version}</version>
            <!-- complie test(JUnit) provided(Servlet Api) runtime(JDBC) system import-->
            <scope>test</scope>
            <type>jar</type>
            <!--<optional> true:依赖不会被传递，只会作用于当前（A 依赖于 B ,B依赖于C[可选]，那么 A 不会间接依赖于 C）</optional>-->
            <!--<exclusions>-->
            <!--<exclusion>-->
            <!---->
            <!--</exclusion>-->
            <!--</exclusions>-->
        </dependency>

    </dependencies>



    <!-- maven 远程插件仓库配置 类似[依赖]远程仓库 -->
    <pluginRepositories>
        <pluginRepository>
            <id>central</id>
            <name>Maven plugin</name>
            <url>htpp://repo1.maven.org/maven2</url>
            <layout>default</layout>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
            <releases>
                <enabled>true</enabled>
            </releases>
        </pluginRepository>
    </pluginRepositories>







    <!-- maven 远程仓库配置 -->
    <!-- maven 远程仓库有三种类型：中央仓库、私有仓库、其他仓库 -->
    <repositories>
        <repository>
            <id>jboss</id> <!-- 必须唯一,Maven 自带的中央仓库 id = central -->
            <name>JBoss Repository</name>
            <url>http://repository.jboss.com/maven2/</url>
            <releases>
                <enabled>true</enabled><!-- 更新发布版本 -->
                <!-- daily never always interval -->
                <updatePolicy>daily</updatePolicy> <!-- 每天更新 -->
            </releases>
            <snapshots>
                <enabled>false</enabled> <!-- 不更新快照版本 -->
                <checksumPolicy>warn</checksumPolicy>
            </snapshots>
            <layout>default</layout>
        </repository>
    </repositories>


    <!-- maven 部署管理 deploy jar to remote maven repository -->
    <distributionManagement>

        <!-- setting.xml 配置认证信息 -->
        <!--<servers>-->
            <!--<server>-->
                <!--<id>ossrh</id>-->
                <!--<username>olie</username>-->
                <!--<password>123456</password>-->
            <!--</server>-->
        <!--</servers>-->

        <!-- snapshot repository -->
        <snapshotRepository>
            <id>ossrh</id>
            <url>https://oss.sonatype.org/content/repositories/snapshots</url>
        </snapshotRepository>

        <!-- release repository -->
        <repository>
            <id>ossrh</id>
            <url>https://oss.sonatype.org/service/local/staging/deploy/maven2</url>
        </repository>
    </distributionManagement>


    <build>

        
        <!--<pluginManagement>-->
            <!--等同于 dependencyManagement 的作用，在父模块里面定义统一的插件信息，子模块使用时，直接在 plugin 模块声名 插件的 groupId 和 artifactId 即可-->
        <!--</pluginManagement>-->


        <!-- maven 插件管理 -->
        <plugins>
            <plugin>
                <!-- jar manifest.mf  -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>3.0.0</version>
                <executions>
                    <execution>
                        <id>attach-manifest</id>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <transformers>
                                <transformer
                                        implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                    <mainClass>com.lcifn.Application</mainClass>
                                </transformer>
                            </transformers>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <!-- 生成 源代码 -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>3.0.1</version>
                <executions>
                    <execution>
                        <id>attach-source</id>
                        <phase>package</phase>
                        <goals>
                            <goal>jar-no-fork</goal>
                        </goals>
                        <configuration>
                            <!-- 插件具体目标任务参数配置-->
                        </configuration>
                    </execution>
                </executions>
                <configuration>
                    <!-- 插件全局参数配置 -->
                </configuration>
            </plugin>

        </plugins>
    </build>








</project>